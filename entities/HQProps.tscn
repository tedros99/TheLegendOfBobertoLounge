[gd_scene load_steps=11 format=2]

[ext_resource path="res://img/HQ props.png" type="Texture" id=1]
[ext_resource path="res://entities/HQProps.gd" type="Script" id=2]

[sub_resource type="Shader" id=7]
code = "/* 
Rainbow outline by @Farfalk and @ThePadDev, And Edit for @LURGX in 2022

Apply to canvas items with transparent backgrounds.
Check that there is sufficient transparent background space for the outline!

CC0 License (but citation is welcome <3)
All code is property of @Farfalk and @ThePadDev
Thanks for shader and I'm a newbie with shaders 
*/

shader_type canvas_item;

uniform bool rainbow  = false; //Activate the rainbow or select you color
uniform vec4 line_color : hint_color = vec4(1.0, 1.0, 1.0, 1.0);//color line
uniform float line_scale : hint_range(0, 20) = 1.2;    // thickness of the line
uniform float frequency : hint_range(0.0, 2.0) = 0.5;  // frequency of the rainbow
uniform float light_offset : hint_range(0.00001, 1.0) = 0.5;   // this offsets all color channels;
uniform float alpha : hint_range(0.0, 1.0) = 1.0;

void fragment() {
	vec2 size = TEXTURE_PIXEL_SIZE * line_scale;
	
	float outline = texture(TEXTURE, UV + vec2(-size.x, 0)).a;
	outline += texture(TEXTURE, UV + vec2(0, size.y)).a;
	outline += texture(TEXTURE, UV + vec2(size.x, 0)).a;
	outline += texture(TEXTURE, UV + vec2(0, -size.y)).a;
	outline += texture(TEXTURE, UV + vec2(-size.x, size.y)).a;
	outline += texture(TEXTURE, UV + vec2(size.x, size.y)).a;
	outline += texture(TEXTURE, UV + vec2(-size.x, -size.y)).a;
	outline += texture(TEXTURE, UV + vec2(size.x, -size.y)).a;
	outline = min(outline, 1.0);
	
	vec4 animated_line_color = vec4(light_offset + sin(2.0*3.14*frequency*TIME),
							   light_offset + sin(2.0*3.14*frequency*TIME + radians(120.0)),
							   light_offset + sin(2.0*3.14*frequency*TIME + radians(240.0)),
							   alpha);
	
	vec4 color = texture(TEXTURE, UV);
	if (rainbow == true){//if rainbow is activated
		COLOR = mix(color, animated_line_color, outline - color.a);
	}
	if (rainbow == false){//if rainbow not is activated and you pick a color
		COLOR = mix(color, line_color , outline - color.a);
	}
}"

[sub_resource type="ShaderMaterial" id=8]
resource_local_to_scene = true
shader = SubResource( 7 )
shader_param/rainbow = true
shader_param/line_color = Color( 0, 1, 0.905882, 1 )
shader_param/line_scale = 1.2
shader_param/frequency = 0.5
shader_param/light_offset = 0.5
shader_param/alpha = 1.0

[sub_resource type="RectangleShape2D" id=1]
extents = Vector2( 16, 9 )

[sub_resource type="RectangleShape2D" id=2]
extents = Vector2( 32, 9 )

[sub_resource type="RectangleShape2D" id=3]
extents = Vector2( 5, 12 )

[sub_resource type="CircleShape2D" id=4]
radius = 12.0

[sub_resource type="CircleShape2D" id=5]
radius = 19.105

[sub_resource type="CircleShape2D" id=6]
radius = 37.0

[node name="HQProps" type="StaticBody2D"]
script = ExtResource( 2 )

[node name="Sprite" type="Sprite" parent="."]
material = SubResource( 8 )
texture = ExtResource( 1 )
hframes = 2
vframes = 3
frame = 5

[node name="Collision" type="CollisionShape2D" parent="."]
shape = SubResource( 1 )
disabled = true

[node name="Collision2" type="CollisionShape2D" parent="."]
shape = SubResource( 2 )
disabled = true

[node name="Collision3" type="CollisionShape2D" parent="."]
shape = SubResource( 3 )
disabled = true

[node name="Collision4" type="CollisionShape2D" parent="."]
shape = SubResource( 4 )
disabled = true

[node name="Collision5" type="CollisionShape2D" parent="."]
shape = SubResource( 5 )
disabled = true

[node name="GrabRange" type="Area2D" parent="."]

[node name="Collision" type="CollisionShape2D" parent="GrabRange"]
shape = SubResource( 6 )

[connection signal="body_entered" from="GrabRange" to="." method="_on_GrabRange_body_entered"]
[connection signal="body_exited" from="GrabRange" to="." method="_on_GrabRange_body_exited"]

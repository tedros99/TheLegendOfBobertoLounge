[gd_scene load_steps=7 format=2]

[ext_resource path="res://fonts/videotype.ttf" type="DynamicFontData" id=1]
[ext_resource path="res://theme.tres" type="Theme" id=2]
[ext_resource path="res://menus/MainMenu.gd" type="Script" id=3]

[sub_resource type="DynamicFont" id=1]
size = 32
font_data = ExtResource( 1 )

[sub_resource type="Shader" id=5]
code = "/*
	CRT shader for Godot Engine by Yui Kinomoto @arlez80
*/
shader_type canvas_item;

const float PI = 3.1415926535;

// ブラウン管のガラスの曲がり具合（フラットなやつは0.0でいいかな）
uniform float crt_curve : hint_range( 0.0, 1.0 ) = 0.02;
// 走査線の濃さ
uniform float crt_scan_line_color : hint_range( 0.0, 1.0 ) = 0.347;
// 光量
uniform float aperture_grille_rate : hint_range( 0.0, 1.0 ) = 0.4;
// RFスイッチ的ブラー
uniform float rf_switch_esque_blur : hint_range( 0.0, 1.0 ) = 1.0;
// 白色ノイズ
uniform float white_noise_rate : hint_range( 0.0, 1.0 ) = 0.0;

float random( vec2 pos )
{ 
	return fract(sin(dot(pos, vec2(12.9898,78.233))) * 43758.5453);
}

void fragment( )
{
	// ガラスの曲がり具合
	vec2 crt_curve_shift = ( vec2( 1.0, 1.0 ) - sin( UV.yx * PI ) ) * crt_curve;
	vec2 crt_curve_scale = vec2( 1.0, 1.0 ) + crt_curve_shift * 2.0;
	vec2 texture_fixed_uv = UV * crt_curve_scale - crt_curve_shift;
	vec2 fixed_uv = SCREEN_UV * crt_curve_scale - crt_curve_shift;
	// 範囲外を消す
	float enable_color = float( 0.0 <= texture_fixed_uv.x && texture_fixed_uv.x <= 1.0 && 0.0 <= texture_fixed_uv.y && texture_fixed_uv.y <= 1.0 );

	// ガラスの曲がり具合から元色を取得 + RFスイッチ的ブラー
	COLOR.rgb = (
		(
			texture( SCREEN_TEXTURE, fixed_uv ).rgb
		*	( 1.0 - rf_switch_esque_blur * 0.5 )
		)
	+	(
			(
				texture( SCREEN_TEXTURE, fixed_uv + vec2( -SCREEN_PIXEL_SIZE.x * 3.1, 0.0 ) ).rgb
			+	texture( SCREEN_TEXTURE, fixed_uv + vec2( SCREEN_PIXEL_SIZE.x * 3.1, 0.0 ) ).rgb
			)
			*	( rf_switch_esque_blur * 0.25 )	// （RFノイズ）0.5 * （テクスチャから読んだ2箇所を半分にしたい）0.5
		)
	) * enable_color;
	COLOR.a = 1.0;

	// ------------------------------------------------
	// 以下はアパーチャグリル上の1ピクセルごとの処理
	vec2 aperture_grille_pixel = vec2( floor( ( fixed_uv.x / SCREEN_PIXEL_SIZE.x ) / 3.0 ) * 3.0, fixed_uv.y );

	// 白色ノイズ
	float white_noise = random( aperture_grille_pixel + vec2( sin( TIME * 0.543254 ), cos( TIME * 0.254323563 ) ) );
	COLOR.rgb = mix(
		COLOR.rgb
	,	vec3( white_noise, white_noise, white_noise )
	,	white_noise_rate * enable_color
	);

	// アパーチャグリル再現
	float aperture_grille_point = mod( ( ( SCREEN_UV.x * crt_curve_scale.x ) - crt_curve_shift.x ) / SCREEN_PIXEL_SIZE.x, 3.0 );
	float aperture_grille_r_rate = clamp( 1.0 - aperture_grille_point, 0.0, 1.0 ) + clamp( aperture_grille_point - 2.0, 0.0, 1.0 );
	float aperture_grille_g_rate = clamp( 1.0 - abs( 1.0 - aperture_grille_point ), 0.0, 1.0 );
	float aperture_grille_b_rate = 1.0 - aperture_grille_r_rate - aperture_grille_g_rate;
	COLOR = clamp(
		COLOR * vec4(
			normalize( vec3(
				clamp( aperture_grille_r_rate, aperture_grille_rate, 1.0 )
			,	clamp( aperture_grille_g_rate, aperture_grille_rate, 1.0 )
			,	clamp( aperture_grille_b_rate, aperture_grille_rate, 1.0 )
			) )
		,	1.0
		)
	,	vec4( 0.0, 0.0, 0.0, 0.0 )
	,	vec4( 1.0, 1.0, 1.0, 1.0 )
	);

	// 走査線
	COLOR = mix(
		COLOR
	,	vec4( 0.0, 0.0, 0.0, 1.0 )
	,	float( 0 == int( fixed_uv.y / SCREEN_PIXEL_SIZE.y ) % 2 ) * crt_scan_line_color
	);
}
"

[sub_resource type="ShaderMaterial" id=4]
shader = SubResource( 5 )
shader_param/crt_curve = 0.02
shader_param/crt_scan_line_color = 0.0
shader_param/aperture_grille_rate = 0.162
shader_param/rf_switch_esque_blur = 0.416
shader_param/white_noise_rate = 0.0

[node name="MainMenu" type="Control"]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -330.0
margin_top = -180.0
margin_right = 330.0
margin_bottom = 180.0
script = ExtResource( 3 )

[node name="ColorRect2" type="ColorRect" parent="."]
anchor_right = 1.0
anchor_bottom = 1.0

[node name="VBoxContainer" type="VBoxContainer" parent="."]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -190.5
margin_top = -131.5
margin_right = 190.5
margin_bottom = 131.5
custom_constants/separation = 15
alignment = 1

[node name="Label" type="Label" parent="VBoxContainer"]
margin_right = 381.0
margin_bottom = 83.0
custom_colors/font_color = Color( 0, 0, 0, 1 )
custom_fonts/font = SubResource( 1 )
text = "The Legend of Boberto Lounge"
align = 1
valign = 1
autowrap = true

[node name="Start" type="Button" parent="VBoxContainer"]
margin_top = 98.0
margin_right = 381.0
margin_bottom = 128.0
theme = ExtResource( 2 )
text = "START ADVENTURE"

[node name="LevelSelect" type="Button" parent="VBoxContainer"]
margin_top = 143.0
margin_right = 381.0
margin_bottom = 173.0
theme = ExtResource( 2 )
text = "LEVEL SELECT"

[node name="MusicPlayer" type="Button" parent="VBoxContainer"]
margin_top = 188.0
margin_right = 381.0
margin_bottom = 218.0
theme = ExtResource( 2 )
text = "MUSIC PLAYER"

[node name="Quit" type="Button" parent="VBoxContainer"]
margin_top = 233.0
margin_right = 381.0
margin_bottom = 263.0
theme = ExtResource( 2 )
text = "QUIT ADVENTURE"

[node name="ColorRect" type="ColorRect" parent="."]
material = SubResource( 4 )
anchor_right = 1.0
anchor_bottom = 1.0
mouse_filter = 2

[connection signal="pressed" from="VBoxContainer/Start" to="." method="_on_Start_pressed"]
[connection signal="pressed" from="VBoxContainer/LevelSelect" to="." method="_on_LevelSelect_pressed"]
[connection signal="pressed" from="VBoxContainer/MusicPlayer" to="." method="_on_MusicPlayer_pressed"]
[connection signal="pressed" from="VBoxContainer/Quit" to="." method="_on_Quit_pressed"]
